[[[[[[[[[[[[[[[[[[[ 자바 객체지향 ]]]]]]]]]]]]]]]]]]]]]]]]


*자바 = 톱니형 배열
*구조적인 프로그래밍에서 가장 중요한것은 함수로 프로그램을 나누는것
*구조적인 프로그램을 만드는 두가지 방법
	1. 기존의 이미 존재하는 (절차적) 프로그램을 잘라서 조각내고 구조를 만들어감
		—> Bottom up
	2. 아예 코드가 없는 경우 처음부터 설계해야함
		—>Top down

* 함수의 고립화 -> 전역변수의 사용을 함수의 매개변수를 이용해 고립시킴
			-> 외부의 변화가 있어도 함수가 고립되어 있기 때문에 오류 발생 줄일 수 있음
			-> 프로그램을 만들때 배열 연산을 최소화 할 수 있도록 지역변수를 만들어주는것이 바람직하다.
			-> 즉 매개변수 = 함수 외부로부터의 영향을 받지 않도록 하는 중요한 도구 역할

* 함수명명규칙 -> 숫자로 시작X
			->문자사이 공백 X
			->특수문자 사용 X
			->자바는 주로 camel(낙타)표기 시작은 소문자 두번째 단어부터 대문자 시작

* 프로그램 작성 방법 : 경험이 있으면 Top down
				경험이 없으면 통짜로 만들고 bottom up해 구조적으로 변경하기


* 데이터 구조화 :  우리가 머릿속으로 생각하는 데이터 = entity 또는 개념단위의데이터
			-클래스의 선언은 참조형식으로 선언됨
			 (선언은 값 형식, 참조형식으로 나뉜다.)
			 (값 형식은 기본형(정수, 실수, 문자형등)만 맞음, 그 외에 모든 형식은 참조형식이다.)
			-값 형식이 아닌 참조형식들은 모두 new연산자를 이용해 공간을 만들어줘야함 그렇지 않으면 NULL을 가리킨다.

* 구조체 배열 Exam[] exams = new Exam[3];
			위의 구조체 선언은 참조변수 3개만 배열형식으로 만들어진것이지만
			객체는 Exam 객체가 생성되지는 않았다.
			따라서 따로 생성을 해줘야함 ex) exams[0] = new Exam();

* 메소드나 함수 안에서 for문 내부에 변수를 선언하게되면 여러번 선언되는것이 아니다.
 즉 for문에 있든 밖에있든 한번만 선언되고 만다.

* 함수 단위로 공유해야할 데이터라면 더 큰 구조체로 묶어서 정리하여 사용한다.

* 똑같은 기능의 함수를 2개 만들고 오버로딩이 됐을경우 매개변수 인자가 많은쪽이 인자가 없는쪽이 할 수 있는 일을 다 할 수 있으므로 인자가 적은쪽의 함수내용을 지우고 내부에 인자가 많은 함수를 호출하여 집중화 시킨다.




<<객체지향>>
인스턴스 메소드 - 스태틱 선언이 빠져있음, 반드시 인스턴스를 생성해야 사용가능
			메소드 내부에서는 this 키워드로 자신을 가리킴 
클래스메소드(함수, 정적메소드) - 스태틱 선언이 되어있음, 인스턴스 생성없이 사용가능



<<생성자>>
객체 생성시 ExamList exams = new ExamList();
위의 코드에서 new ExamList(); 는 사실 new ExamList + (); 로 나뉨 좌측은 객체 생성 우측 ();는 생성자 실행이다
즉 new ExamList이 실행된 결과로 객체가 있어야만 실행할수있는 (); 함수 즉 생성자
생성자 = 실행될때 한번만 실행되어야함
생성자는 반환타입이 없고 클래스 이름과 동일하게 적용해야함
this() 생성자 사용시 반드시 첫번째 라인에 위치해야한다.



<<getters and setters>>
클래스의 데이터를 연산, 대입, 가져오는 경우는 함수를 통해 전달한다.
	ex getXXX(), setXXX(), total(), getSum(), getAvg(); 



<<캡슐들의 사용관계>>
UI(ExamConsole) -> 목록(ExamList) -> 데이터(Exam)의 구조에서
일반적으로 List라 이름붙은 클래스들은 어떤 객체를 가지고 있긴 하지만 사용하진 않는다

Has a 상속 - 캡슐이 다른 캡슐의 객체를 가지고 있는 상태
Has a : Aggregation has a(부모와 자식의 생성이 동시에 이루어지지 않고 필요시 불러옴) 이게 ExamList와 Exam의 관계
	:  Composition has a(부모 객체가 생성되는 동시에 자식 객체가 같이 생성됨 즉 생성시기가 동일함) ExamConsole, ExamList의 관계
Dependency(의존객체, 부품) : 함수 내에서 일시적으로 사용되는 객체들



<< 자바 클래스 재사용 하는 방법>>
	파일을 단순히 복사해서 같은 패키지에 복사하는 방법 -> 재사용이 아니고 새거를 가져다 쓰는것 (사용)
	이미 만들어서 배포된 것을 다시 사용하는 것 -> 재사용
* 배포방법 
	1. 컴파일 -> Exam.class 파일 생성
	2. 클래스 파일 압축 -> Exam.zip 생성
	3.  Jar -> Exam.jar (자바를 위한 압축파일이라는 의미)
	
	>> java -> jar = 같은 압축이지만 확장자 jar, 압축시 자바 파일을 클래스파일로 컴파일하여 압축하고 jar로 확장자 변경

*이클립스 배포방법
	1. 원하는 프로젝트 우측 버튼 -> 이클립스 내부에서 패키지 우측 버튼 -> Export -> java로 대신 해주는 방법이 있다.
		( general -> archive file = 기존에 있는 프로젝트 중 소스코드 자체 즉 자바 파일을 압축해서 배포할때 사용됨(즉 소스코드 배포시 사용)
	2. 적용하기 원하는 프로젝트 우측버튼 -> Build Path -> Configure Build Path -> 상단 Libraries -> 우측 Add External JARs 선택후 만들어진 jar 파일 적용후 닫기
	3. 프로젝트에 임포트 해서 사용하면 재사용 완료



<<is a 상속>>
	*상속받은 객체를 new해 공간을 만들면 객체가 2개가 생성됨
	*Exam 객체 + 자기가 확장한 새로운 변수나 메소드 확장됨
	*상속받은 클래스를 객체화 할때는 부모 객체들이 다 들어있음 : 부모객체 + alpha

	*객체 내부서 사용시 : this 키워드를 이용
	*객체 내부에서 부모객체 사용시 : super 키워드 이용 >> Override된 함수가 있고 그 함수를 사용하면 부모객체가 아닌 자식객체에서 가져옴 만약 부모객체에서 정의된 메소드 사용 원할시
										  super키워드 이용해서 사용하면 된다.
	*override된 메소드가 없고 그 메소드를 호출할시 부모객체에 존재하는 메소드 사용
	*생성자를 호출하기 위해서는 갓 생성된 객체만 생성할 수 있음
		ex) public NewlecExam() {
			this.com = 3;		<< 코드 집중화를 위해 오버로딩한 생성자에서 다른 생성자 호출이전에 객체변수에 값 대입시 this(0,0,0,0) 구문은 오류발생 따라서 순서를반대로하면 됨
			this(0, 0, 0, 0);
			}

	* 상속이후 부모참조형식으로 자식객체를 생성하고 내부 메소드를 사용시 부모 메소드를 불러오는것이 아닌 자식 메소드를 불러온다
	이유는 오버라이드된 함수가 우선순위가 있기 때문 즉 참조형식 메소드보다 객체형식 메소드가 우선순위가 있으므로 부모메소드를 들렀다가 오버라이드된게 있을경우 그걸 호출
	하지만 부모클래스에 없는 메소드가 자식클래스에 있을경우 위와같이 불러오면 오류가 발생한다. >> 부모클래스 내에 함수 자체가 없으므로 자식에 있는 메소드는 오버라이드 된게 아닌
	새로이 정의된 함수이므로 접근할 수 없다.



<<추상클래스>>
*추상 메소드를 하나라도 가지고 있는 클래스를 추상 클래스라고 함 즉, 일반 클래스에는 추상 메소드가 있을 수 없음

*클래스들은 공통분모가 있고 공통분모를 따로 모아놓아 상속을 시키면 그 클래스는 추상클래스가 된다.

*캡슐단위의 공통서비스를 모음(개체들의 공통서비스 집중화)

*추상클래스의 장점 : 코드 집중화, 일괄처리

*공통분모(또는 뼈대)로써의 클래스가 되면 기울기체로 표시 >> 뼈대로만 사용하게 해야함 즉 new연산자로 객체화되는것을 막아야함 >> abstract 키워드 이용하면됨

*추상클래스의 두가지 용도 1. 한 프로젝트 내에서 공통분모로 사용될 수 있는 자료형을 만들목적으로 집중화
				    2. 공통분모로써 다음버젼을 만들기위한 재사용 모듈 (다른 프로젝트)



<<추상메소드 24강>>
*공통으로 나타나는 서비스 함수만 추상클래스에 올려놓음 즉 메소드의 뼈대만 올려놓으면 >> 추상메소드가 됨
*이것 역시 기울임체로 표기
*메소드 앞에 abstract키워드를 붙여 생성하고 그것을 (is a)상속받는 자식 클래스가 추상 메소드를 구현하지 않으면 오류가 발생한다.

* 추상 메소드는 공통 자료형이라 할 수 있는 추상 클래스가 가지고 있는 공통 서비스 함수다. >> 다만 공통 서비스지만 구현이 공통이 아니고 서비스라 하는 목록이 공통이다.
	ex) 추상 클래스 shape : <—— Rect, Circle, Line자식 클래스가 있을때 draw()메소드는 각각 다르므로 공통 서비스 목록만 shape클래스에 구현하고 구현은 각각의 자식클래스에 구현한다.
		다만 이를 간편화 하기 위해 자식클래스까지만 사용할 수 있는 protected지정자를 이용해 자식클래스가 처음부터 메소드를 구현해야하는 부담을 줄일 수 있다.

****** ExamConsole은 Exam 객체의 total(), avg() 메소드를 이용하여 본인의 print(), input() 메소드를 구현함 하지만 total, avg는 공통기능이며 내가 사용할 수 없는 상황이다(종류에 따라 바뀌므로)따라서 추상메소드로 변경하고 이것에 대한 구현은 Exam클래스를 상속받는 하위클래스에게 위임함.

* 기존의 구현되어있던 기능을 가져다 쓰지 못하고 자식클래스에서 통째로 구현해야하는 부담을 줄여주기 위해 자식객체만
사용할 수 있게 메소드를 만들어줄 수 도 있음 >> Exam 클래스의 onTotal()



<<jar변환없이 라이브러리 처럼 프로젝트 재사용 방법>>
1. Build Path > Configure Build path > project > add > 원하는 프로젝트 선택
2. 만약 서로 다른 프로젝트에서 패키지의 이름이 같다면 같은 패키지에 있다고 보고 그걸 가져다 연동시켜줌
	(jar, 프로젝트, 배포된 내용 달라도 같은패키지에 있다고 봄)

<<팩토리 메소드>>
* 객체를 생성하는 부분을 자식에게 위임해서 자식이 객체 생성부분을 책임지게 하는 메소드 makeExam()

<<이벤트 메소드>>
*이벤트 메소드 : 어떤 사건에 기반되고 실행되는 함수 (onInput(Exam exam), onPrint(Exam exam) )
	-자식객체에서 추가되는 과목 성적을 자식에게 맡김
	-입력을 받기위한 로직이 진행되는 과정에서 확장되는 부분은 자식이 입력하라는 의미로 on사용
	-이벤트 메소드 = 어떤 사건에 기반되어 실행되는 함수

<< Interface >>

<인터페이스의 개념>
*인터페이스 == 코드의 분리
*인터페이스는 두가지 형태의 인터페이스가 존재
  -일반화 되어있는 인터페이스: 어떤것, 장소, 시간을 접근해야할때 바로 접근할 수 없음(여러가지이유)
					접근하게 해주는 방법 또는 도구 >>>>> interface
						ex) 인터스텔라의 웜홀(다른 우주로 접근시켜줌)
  -직접 사용할 수 없는 대상(떨어져있고 분리되어있음)을 만날 수 있게 해주는 접점 == interface
	>> Java에서도 필요함.


<Java 에서의 interface>
*자바의 객체지향 : 어떤 특정 부품을 조립할때 일체형(composition has a)으로 할지 단순 사용 관계(Association)로 분리하여 만들지 고민해야함
	>> 만약 분리하겠다 하면 그냥 떼어내는것이 아닌 나중에 연결해서 사용할 수 있게 하는 접점 == interface

* interface : 분리된 부품을 사용하기 위한 규칙이나 규약 즉 약속
객체 생성전 클래스처럼 인터페이스도 하나의 틀을 만들어야함
 > 구문 
	interface Battery { 
		int getEnergy();
		Boolean checkVolt(…);	
	}


> 사용할 클래스 에서 인터페이스를 이용한 변수 선언
	private Battery battery; >>인터페이스 형식의 자료형
	
	battery.getEnergy();
	battery.checkVolt(본체정보);		>> 자료형을 만들고 구현되지도 않은것들을 일단 호출함

>실제 부품과 사용할 클래스를 합칠시 키워드가 필요함
	.setBattery(battery:Battery)

>실제로 배터리를 구현하기 위한 코드 (인터페이스 상속==인터페이스를 내가 구현하겠다)
 	class NewlecBattery implements Battery {
		public int getEnergy() {
			//메소드 구현
		}
		public Boolean checkVolt(PhoneInfo info) {
			//메소드 구현
		}
	}
 

따라서 자바에서의 인터페이스 정의방법
1. 인터페이스란 키워드와 함께 인터페이스명 정의(배터리) > 2.인터페이스를 이용해 만들던 클래스를 마무리지음(스마트폰, 비어있기 때문에 아직 동작 불가능)
> 3.배터리라는 인터페이스를 구현하고 있는 객체를 구현(인터페이스 상속 implements 인터페이스명) > 구현체라는걸 만들어 세팅함 (.setBattery(battery:Battery) )

인터페이스의 두 가지 방법 > 1. 부품이 분리되는 형태에서 사용되는 인터페이스 ( 특징 : 인터페이스가 여러개의 메소드를 가짐, 마치 하나의 부품이 가지고 있어야할 모든 목록을 다 구현하고 있는것처럼 보여짐)
				    > 2. 코드의 일부분만 분리 즉 메소드의 일부분의 내용을 분리하는 인터페이스


<< 추상 클래스와 인터페이스의 차이 30강 >>

* 추상 클래스 : *객체들의 갖고있는 녀석의 일반화 또는 공통화를 클래스로 만듦 >> *공통으로써 있는것이 속성이라면 그걸 집중화 함 (멤버변수)
							   *기능적으로 같이 가지고 있어야할 공통분모의 기능, 서비스가 있으면 집중화하거나 강제화 할 수 있음 (추상 메소드)

	     * 추상클래스를 사용하는것이 누군지는 관심이 없고 중요한 것은 자식클래스들의 공통사항을 집중화하는것이 첫번쨰 목표
	     * 누군가가(ExamConsole) 추상화된 녀석을 가지고 사용하면 (Exam) Exam을 상속받는 객체들을 모두 사용할 수 있음.(NewlecExam, YBMExam의 공통분모인 Exam수준에서 사용하는 것이므로 공통분모를 가지고있는 하위 클래스도 사용가능)
		>> 따라서 Exam을 상속받고있는 녀석들에 대해서 일괄적으로 관리할 수 있게되는 클라이언트를 만들 수 있다.
	    ****** 따라서 추상클래스는 클라이언트(ExamConsole)와 상관없이 [Exam(NewlecExam YBMExam)==도구]이 먼저 존재하게됨 그리고 클라이언트가 어떤걸 사용할 것인지 결정지어짐 (선 도구 후 결정)

* 인터페이스 : 추상 클래스와 반대 클라이언트가 어떤 기능을 구현하고 서로다른(공통점이 없는) 객체임에도 기능을 사용할 수 있게 인터페이스를 만들고 인터페이스상속을 받으면 구현되어있는 클라이언트를 이용할 수 있다.
	    또한 여러개의 인터페이스를 상속받을 수 있음


>>>> 클래스 상속 : dna상속
>>>> 인터페이스 상속 : 사교적으로 필요에 따라 결합하는 상속
	    

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 인터페이스 구현 1 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

* 인터페이스는 사용자 입장에서 정의를함 구현하는것은 인터페이스를 상속받는곳
	>> 단위에 따라 인터페이스가 캡슐단위, 메소드단위, 메소드 중 일부구간단위(매개변수통해전달)등 다양한 단위로 구현가능.
* 인터페이스는 기능적인것만 구현했다면 어떤것이라도 꽂아서 사용가능 즉 형태가 다양해진다. >> "다형성"


* A a = new A();			>>>> 구현 public A() { b = new B(); }		>>>>> 클래스 내부에 멤버변수로 private B b; 가짐
	// 내부적으로 일체형의 A클래스가
	// 어떤 부품을 사용하는지 알 수 없음.
	// 강한 결합 = 소스코드를 통해 서만 고칠수 있음
	// 약한 결합 = 소스코드 없이도 변경할 수 있음
	// A, B가 생명주기를 같이함
	// 일체형이므로 결합력 강함
	// 앞으로 태어나야하지만 존재하지않음
	// total() 기능을 책임지고 호출할 수 있는 자료형 필요 >> 인터페이스


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 인터페이스 구현 2 (32강)>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
--------------------------INTERFACE------------------------------
package part3_ex06_Interface;
				// 인터페이스는 약속만 정하기때문에 구현을{ } 하지 않는다.

				// 또 인터페이스는 어떤 기능에 대한 목록을 약속을 하는것이기 때문에 
	  			 인터페이스가 어떤 데이터를 서비스하거나 숨기거나하는 캡슐이 아니므로 접근지정자가 들어갈 이유가 없음
public interface X {
				// 접근지정자는 데이터를 가지고 있거나 구현을 하고 있는 캡슐에서만 의미가 있음
				// 인터페이스 내부에서 어떠한 속성도 정의하지 않음 >> 인터페이스는 기능 목록만을 약속하는 것이므로
	int total();
}

/*
  인터페이스를 사용할 때
  x = new X()는 말이 안됨
  객체에서의 생성은
  클래스 내부의 데이터 객체를 생성하는것인데
  인터페이스는 데이터를 정의하고 있지 않으므로
  말이 안됨.
  
  인터페이스를 가지고 오로지 할 수 있는 것
  참조라는것을 가능하게함 > 인터페이스가 정의하고 있는 또는 약속하고 있는
  기능을 구현하고 있는 객체라면 무조건 참조를 가능하게 함 
  참조를 해서 객체가 구현하고 있는 기능을 이용하게 함
  즉 A라는 객체를 마감처리가능케함
 */
------------------------------INTERFACE IMPLEMENTS---------------------------------

package part3_ex06_interface;

public class B implements X {			<< X라는 인터페이스가 부탁하는 기능을 구현했다 implements(인터페이스 구현)

	@Override
	public int total() {
		return 30;
	}
}
------------------------------CLASS----------------------------

public class A {
	//인터페이스
	private X x;
	
	public void setX(X x) {
		this.x = x;
	}
	
	public A() {
		//b = new B();
	}
	
	public void print() {
		int total = x.total();
		
		System.out.printf("total is %d\n", total);
	}
	
	
}

-----------------------------MAIN FUNCTION-----------------------------

Main {

	A a = new A();
	B b = new B(); 
	a.setX(b);
	a.print();
	인터페이스를 구현해서 
	// A, B가 결합을 하고 있음
	// 일체형이 아닌 결합형으로 결합
	// 결합이 인터페이스만 구현하고 있는객체라면
	// 누구나 결합할 수있는 형태 
	// 하지만 소스코드를 고쳐야만 새로운 객체 결합가능 >> 해결법 33강

}

--------------------------------------------------------------









<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 소스코드 변경없이 인터페이스 구현 (33강)>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

32강의 코드 >> 소스코드를 고쳐야만 다른 클래스 사용가능
 	ex) C b = new B(); >> 소스코드가 있어야만 가능
 
소스코드없이 클래스를 변경할 수 있는 방법 >> 설정파일(외부파일) 하나 만듦(달라져야하는 부분을 설정파일로 변경)
 	종류
 		1. XML형태 같은걸로 이루어진 외부설정파일	
 		2. annotation 외부파일이 아니라 클래스에다 컴파일해도 남겨지는 주석을 달아서 설정으로 사용
 		
1 번 방법을 간단하게 외부파일을 이용해 클래스를 변경할 것임
 	- 자료형은 인터페이스형으로 변경 X x = ?;
 	- ? 부분은 외부에서 읽어와서 채워넣자
 	- 생성해야 할 객체에 대한 이름을 외부에다가 설정으로 바꿔놓기
 	- setting.txt 만들어서 내부에 패키지명을 그대로 사용하고 . 붙이고 원하는 클래스 명 붙임
 		> part3_ex06_interface.B
 	- setting.txt 파일을 읽어와서 클래스를 생성할것임


----------------------------------------setting.txt----------------------------------------------
part3_ex06_interface.C
혹은
part3_ex06_interface.B
>> C, B는 실제로 구현되어 있어야함


--------------------------------------------------------Prgram.java (소스코드변경없이 사용클래스 변경)----------------------------------------------

package part3_ex06_interface;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;

public class Program {
//예외처리들은 던짐(throw)
	public static void main(String[] args) throws IOException, InstantiationException, IllegalAccessException, ClassNotFoundException {
			// 경로를 이용해 파일을 불러옴
			// 경로 지정할때 파일시스템의 경로를 다 넣거나
			// OOPJavaPrj프로젝트(root경로가됨)부터 경로 입력, 루트 경로를 통해 하므로 /사용
		FileInputStream fis = new FileInputStream("src/part3_ex06_interface/setting.txt");
			// fis에 저장된 파일내용을 입력 받기 위한 Scanner 클래스
		Scanner scan = new Scanner(fis);
			// Scanner로 읽어올 클래스 담을 변수
		String className = scan.nextLine();
			// 읽어오고나서 스캐너와 파일입력스트림은 닫아줌
		scan.close();
			// 예외처리 던짐
		fis.close();
			//예외처리 다 던짐

		Class clazz = Class.forName(className);
		//Class 라고하는 클래스 Class.forName(String)은 String을 읽어서 클래스에 대한 정보를 얻음
				
		A a = new A();
		X x = (X) clazz.newInstance();							>>원하는 클래스는 txt파일에서 변경하면 삽입됨, 소스코드 변경 없이
		//X x = clazz.getDeclaredConstructor().newInstance();  << 1.8버젼 아닐경우
		
		
		
		
			//X x = Class.forName(className);
			흔히클래스에 대한 정보 필요할때
			String.class >> 클래스에 대한 정보를 가지고 있는 속성아닌 속성 이것을 통해 문자열 객체 만들 수 있음
			또는 인스턴스명(객체명 fis.getClass()) 위와 같은내용의 객체 혹은 개체에 대한 속성, 메소드 같은 정보를 알려줄 수 있거나 알아낼 수 있는 녀석
				
			부가적으로 A.class. 으로 A 클래스가 가지고있는 속성, 메소드, 생성자, 어노테이션 정보 등등을 알아냄
				>> 이것을 통해 런타임시 클래스의 매개값, 메소드 이름등을 알아내서 라이브러리 만들때 효율적으로 사용가능
				>> 현재 만들어진 프로그램의 구조파악 용이
		/*
		두가지의 인스턴스 생성방법
		A.class.newInstance();
		new A();
		*/		

		a.setX(x); 
		
		a.print();
	}

}





<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 일부 기능(코드)만 인터페이스 변경(34강)>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>> GamePrj 확인




[[[[[[[[[[[[[[[[[[[ 자바 예외처리 ]]]]]]]]]]]]]]]]]]]]]]]]

<<<<<<<<<<<<<<<<<<<<<<<<<2강 예외처리는 무엇이고 어디에서 예외를 처리하는가? >>>>>>>>>>>>>>>>>>>>>>>>>

		"예외처리 스크린샷 1, 2 참조"

* 성적관리 프로그램에서 파일 입출력시 프로그램에서 하드디스크를 직접 이용하지 않음 대신 인터페이스를 사용 
	>> 디스크를 액세스 할 수 있도록 하는 인터페이스 = API (데이터 입출력시 문제 없는지, 권한, 용량, 존재여부등 확인)
	>> 만약 데이터 입출력하기 위한 조건을 충족하지 못하면(권한 없거나 등등) 어떻게 처리?   >>>>   이것이 예외처리

* 그렇다면 예외를 API가 처리하나??
	>> 옳지 못함 왜? > 책임자는 성적관리프로그램인데 api에게 예외처리를 맡기는건 옳지 못함 따라서 예외 발생시 어떻게 처리할지 api가 성적관리프로그램에게 물어봐야함
	>> 물어볼때 return 사용하면 만약 api와 성적관리프로그램 중간에 다른 라이브러리 사용시 모든 라이브러리에서 return을 계속 타고가야하므로 >> 복잡도 높아지고 코드 어수선해짐
	>> 따라서 보고 체계만 일괄적으로 처리해야함 >> 문제가 발생하는 예외에대한 종류를 식별자를 만들어 구분하고 보고하기 위해 던짐 (throw)

* java는 throw로 던질때 좀 더 자세한 의미를 전달하기 위해 특수한 의미의 객체를 만들어 던짐
	>> ex) throw new 권한없음예외(); > 캡슐화의미, 기능내포의미 x 단지 예외를 식별하기위한 특수한 의미인 클래스를 만들어 클래스를 객체화해 던짐 >> 코드상에서 좀 더 직관적으로 이해가능 >> 유지보수성 증가

* 예외를 던지면 책임자인 성적관리프로그램은 던진 예외를 받아야함
	>> 
	try {
	  write(..);
	}
	catch(권한없음예외 ex) {
	  System.out.println("이용할 수 없습니다.")		>> 예외의 종류에따라 메시지를 출력할지 프로그램을 끝낼지 결정함
	} 



<<<<<<<<<<<<<<<<<<<<<<<<<4강 예외 클래스 생성과 던지기 >>>>>>>>>>>>>>>>>>>>>>>>>

간단한 사칙연산 클래스를 만들어서 연산을 진행했을때 일정 값의 범위를 벗어나면 예외처리를 하는 방식의 프로그램

-------------------Calculator Class-------------------------


public class Calculator {
	public Calculator() {
	}

					// throw를 내가 처리하지 않고
					// 나를사용하는 책임자가 처리하게 던짐
	public static int add(int x, int y) throws ExceptionOver1000, ExceptionBecomeNegative {
					// 복수형인이유 : 예외가 한 개가 아니라 여러개 일 수 도 있으므로
					//	       한번에 던지기 위해서 복수형
		int result = x + y;
		// 우리가 만드는 업무적인 예외
		if (result > 1000) {
			throw new ExceptionOver1000();
		}
		
		if (result < 0) {
			throw new ExceptionBecomeNegative();
		}
		return result;
	}

	public static int sub(int x, int y) throws ExceptionBecomeNegative {
		int result = x - y;
		// 우리가 만드는 업무적인 예외
		if (result < 0) {
			throw new ExceptionBecomeNegative();
		}
		return result;
	}

	public static int mul(int x, int y) {
		return x * y;
	}

	public static int div(int x, int y) {
		return x / y;
	}

}


-----------------------예외처리 클래스---------------------
//Calculator 에서 예외처리를 하면 예외처리를 상속받은 예외처리 클래스가 생성된다.

public class ExceptionBecomeNegative extends Exception {

}

public class ExceptionOver1000 extends Exception {

}

--------------------Program.java-----------------------


public class Program {

	public static void main(String[] args) {
		Calculator calc = new Calculator();
		// static method
		int result = 0;

		// 합이 1000을 넘는 예외 처리
		try {
			// 다중예외 발생시 같이 묶어놓음
			result = Calculator.add(3, 4);
			System.out.println("add : " + result);
			result = Calculator.sub(3, 4);
		}
		// try 구문에서 던져진 예외를 잡겠다.
		// 단순히 catch블럭만 있어도 오류조치됨
		catch (ExceptionOver1000 e) {
			// 메시지를 직접 쓸수도 있지만 예외 클래스의 메소드를 오버라이드해
			// 예외를 만드는 입장에서 동일하게 예외에 대한 메시지 전달가능
			// 앞으로 이어갈지 말지 다시 입력하게할지말지를 처리 하는과정이 예외처
			System.out.println(e.getMessage());
		} 
		// 나머지를 받는 범위가 넓은 exception else나 default 범위가 가장 넓으므로 다른 catch절보다 위로 올라가면 다른 절들은 무용지물
		catch (Exception e) {

		}
		// 어떤 catch절을 들르든 마지막에 finally절을 꼭 들르므로 동일한 메시지가 중복되면 finally절에 작성해 예외 처리를 집중화 할 수 있음
		finally {
			System.out.println("입력 값에 오류가 있습니다.");
			
		}
		
		System.out.println("sub : " + result);
		result = Calculator.mul(3, 4);
		System.out.println("mul : " + result);
		result = Calculator.div(3, 4);
		System.out.println("div : " + result);
	}

}


* 예외가 발생하는걸 어떻게 알까?
  - 이클립스가 아닌 다른도구나 메모장으로 코딩시 예외가 발생하는지 어떻게 알까?
  - 만약 api가 예외를 던지고 있으면 레퍼런스 즉 문서를 통해 우리에게 어떤 예외를 던지는지 말해줌 [ex)자바 공식문서 등등] 따라서 메모장으로 작성해도 예외가 발생할 경우 문서를보고 판단할 수 있음
  - 결국 어떤 예외를 던지는지 잘 파악하고(레퍼런스,공식문서 어떻게 처리할지 결정해야함)

* Checked Exception, Un-Checked Exception

  - Checked Exception : 우리가 강제적으로 예외처리를 해주어서 잘못된 값을 입력하면 처리를해줌 위의 예시들이 모두 checked Exception이 된다.
  
  - Un-Checked Exception : 사용자가 알아서 잘 사용할거라 판단되어 강제적으로 예외를 처리하지 않는 RuntimeException 이다.
			  실행시 판단한다. 주로 나눗셈연산에서 0으로 나누는경우 발생된다. 위의 예시코드에서
			  위의 예시 코드에서 예외클래스는 Exception -> RuntimeException을 상속받게하고
			  Calculator 클래스는 예외를 던지지 않는다.
			  그리고 main function의 try catch문은 모두 지운다


[[[[[[[[[[[[[[[[[[[ 자바 컬렉션과 제네릭 ]]]]]]]]]]]]]]]]]]]]]]]]


* 컬렉션 : 배열을 가지고 직접 사용하는 것들을 서비스 개념으로 사용할 수 있게 해주는 도구, 데이터관리를 대신해주는 객체, 데이터 크기를 가변적으로 바꿔주는 역할, 데이터를 수집하고 관리해주는 객체
  - 가장 기본적인 능력은 데이터수접, 삭제, 크기를 알려주는 기능을 기반으로 만들어짐
  - 컬렉션을 사용하는 경우 배열을 직접 사용할 필요없고 안에 내용물이 어떻게 보관되고 어떤 구조를 가지고있는지 관심가질 필요가 없다.
  - 안에 저장소에대한 내용을 숨기고 사용자에게 간단한 서비스를 제공함 따라서 데이터 관리가 더 쉬워짐

* 컬렉션을 왜 사용하는가?
  1. 데이터 관리를 직접 할 필요가 없다.
  2. 배열을 직접 사용할 경우 공간의 크기를 미리 지정해서 그 크기를 늘릴수 없었지만 컬렉션은 공간을 늘리는 작업을 자동으로 해준다.
>>>> 즉 컬렉션은 가변길이의 배열을 사용하고 싶을때 쓰는 객체라고 말할 수 도 있따.



<<<3강 Object 클래스의 필요성>>>

* 명시적으로 어떤 상속을 받지 않은 클래스도 즉 모든 클래스는 Object를 상속받는다
  ex) 만약 Exam <--- NewlecExam 일 경우 NewlecExam클래스는 실질적으로 Object클래스까지 총 2개의 객체가 숨어있다. 따라서 NewlecExam을 참조할 수 있는 자료형이 2개가 있다. (Exam, Object) 
	>> NewlecExam r1 = new NewlecExam();
	>> Exam r2 = new NewlecExam();
	>> Object o1 = new NewlecExma();
	위 처럼 참조 가능하다.
  - 모든 클래스가 Object 클래스를 갖으므로 모든 객체는 Object라는 단일화된 형식으로 참조할 수 있음
  - 문자열, 객체, 배열 등등 모두 Object로 참조가능
  - Object가 자바에 있어야할 이유 = 모든 객체를 섭렵할 수 있는 "범용 자료형"이 필요했다. >> 즉 Object는 공통자료형이 필요했기 때문에 존재할 가치가 있다.




<<<4강 Wrapper 클래스와 Auto Boxing/UnBoxing>>>

* Object는 모든 객체형태를 참조 가능 그러나 값을 참조할수없음 >> 이런 문제를 해결하기 위해 Wrapper 클래스가 등장 >> 직접사용 불편하므로 JDK1.5부터 오토박싱, 오토언박싱이 등장
* 값은 참조할 수 없으므로 공간이 될 수 있도록 감싸야한다 >> Wrap
  Object obj = 3 XXX불가 >>  Object obj = new Integer(3);		(JDK 1.5이상부터 3을 그냥 대입해도 오토 박싱으로 자동으로 참조가 일어나므로 편하게 사용가능)

* Boxing : Object obj = new Integer(3); >>> UnBoxing : int x = obj.intValue();
* 기본자료형을 박싱하기 위해 기본자료형의 수만큼 박스를 위한 Wrapper Class가 존재한다.
   >> Object(클래스)  <------------ Number(클래스) <-------- (Byte, Integer, Short, Long, Double, Float),  String은 독자적(자료형이아니고 참조형이므로 그대로 사용가능)

* int x = 3; >> 값을 담음
* Integer x = 3; (new Integer(3)) Auto-Boxing : 값을 공간으로 감싸서 저장(Wrapper)

* Integer x = 3; 으로 선언하고 add(x, 4)와 같이 전달을 하게 되면 참조형식을 전달하는게 아니라 Auto-UnBoxing이 동작하여 값이 전달하게 된다. (x.intValue()) 

<<<5강 Object 컬렉션으로 변경하기>>>

--------------------Class파일 (ObjectList)-----------------------

public class ObjectList {
	private Object[] nums;
	private int current;

	public ObjectList() {
		nums = new Object[3];
		current = 0;
	}
	// Auto Boxing
	public void add(Object num) {
		//Auto Boxing
		nums[current++] = num;
	}

	public void clear() {
		current = 0;
	}

	public int size() {
		// TODO Auto-generated method stub
		return current;
	}
	// 참조형 반환
	public Object get(int index) {
		if (current <= index)
			throw new IndexOutOfBoundsException();
		return nums[index];
	}

}

--------------------Program.java-----------------------

public class Program {

	public static void main(String[] args) {
		ObjectList list = new ObjectList();
		list.add(3);
		list.add(5);
		
		int size = list.size();
		System.out.println("size : " + size);

		list.clear();
		size = list.size();
		System.out.println("size : " + size);
		
		list.add(7); 
		// 참조를 반환받음(정수형의 Wrapper클래스)
		// Object형식으로 반환받았으므로 Integer 참조형식으로 형변환
		// 하지만!!! 범용자료형이므로 두 가지 문제 발생
		// 1. 변환시 어떤 값을 가지고 있는지 확신이 안섬.
		// 2. 확신을 가지고 사용해도 형변환을 사용해야 한다는점.
		// 해결책!! >>> Generic!!
		int num = (Integer)list.get(0); // 참조형 Integer 로반한됨
		System.out.println("num : " + num);
	
		num = (Integer)list.get(1);
	}

}


<<<6강 Generic이란??>>>

* 모든것을 Object형으로 만들고 값을 넣고 빼는 부분에서 형식을 변환한다, 생성된 데이터형식을 오브젝트로 만들고 Object를 담고 빼줄때 사용자가 원하는 자료형으로 형변환을함
* 따라서 Object가 들어가고 나갈때 사용자가 원하는 형식으로 바꿔준다 --> 즉 무엇이든 될수있는 녀석 == Generic(무엇이든 될 수 있다)
* 객체는 무조건 Object형식으로 하되 들어오는 값을 T형으로 형변환해줌


--------------------Class파일 (Generic)-----------------------

//Generic 클래스
// T(type) 약자를 주로 사용 아무거나 써도됨
// 인자를 2개 넘길 수 있음
public class GList<T /*, 두번째타입*/> {
	private Object[] nums;
	private int current;

	public GList() {
		
		// nums = new T[3]; 불가 
		nums = new Object[3];
		current = 0;
	}
	// Auto Boxing
	//객체는 무조건 Object형식으로 하되 들어오는 값을 T형으로 형변환해줌
	public void add(T num) {
		//Auto Boxing
		nums[current++] = num;
	}

	public void clear() {
		current = 0;
	}

	public int size() {
		return current;
	}
	public T get(int index) {
		if (current <= index)
			throw new IndexOutOfBoundsException();
		// 벗어날때 T를 반환해야 하므로 T형식으로 형변환해줌(Wrapper 형태의 클래스 기본자료형은 안됨)
		return (T)nums[index];
	}

}



--------------------Program.java-----------------------


package com.hiiwee.app.util;

public class Program {

	public static void main(String[] args) {
			// 자료형에 형식을 넘길 수 있음
			// 오브젝트로써의 형식 변환이 가능한 Wrapper형식만 가능 ex(Integer, Char ...)
		GList<Integer> list = new GList</* String */>();
			// 묵시적으로 앞에서 형식명칭을 드러냄으로 뒤에 String 생략가능
			// <Interger>로 묵시적으로 설정했으므로 정수만 가능(문자열, 실수 등등 정수아니면 안됨)
		list.add(3);
		list.add(5);

		int size = list.size();
		System.out.println("size : " + size);

		list.clear();
		size = list.size();
		System.out.println("size : " + size);

		list.add(7);
			// Integer로 형변환하지 않아도됨 이미 T로 변환시키고 넘기므로
		int num = /*(Integer)*/list.get(0);
		System.out.println("num : " + num);

		//num = (Integer)list.get(1);
	}

}






<<<9강 자바언어에 포함된 Collection 프레임워크>>>

Collection <-------------(Set, List, Queue)  :  Set, List가 Collection중 많이 사용됨
Map : 콜렉선이지만 기존 정의하는 내용과 함수의 형태가 달라서 별도로 빠져있음(데이터 구조가 조금 다름)

  >> 많이 사용되는 3대 Collection : Set, List, Map이 많이 사용된다.
  >> 하지만 인터페이스 이므로 실제 인터페이스를 구현하는 구현체가 없으면 사용가능한 객체가 없다.
  >> ex) List는 ArrayList, LinkedList, Stack 클래스들이 List 인터페이스를 구현하고 있다.
         Map인터페이스를 구현하는 대표적인 클래스 >> HashedMap

* 자료구조
  - 비선형 데이터구조: tree(검색속도를 좋게 만들고 읽기전용의 데이터구조, 검색 빠름 데이터 insert(삽입)은 시간 좀 걸림)
  - 선형 데이터구조: 링크(참조, 포인터)로 연결된 데이터 (데이터 삽입, 삭제 업무가 주가 됨 배열사용시 문제 생김)
			따라서 참조와 값을 하나의 공간으로 만들어 연결하는 방식으로 데이터 저장 >> 삽입 삭제 자유로움
			단 검색시 참조를 계속 물며 검색하므로 속도는 느림

* 선행적으로 알아두기 
  Set <------- HashSet
  List <------ ArrayList
  Map <------- HashMap


<<<10강 Set, List, Map 콜렉션 프레임워크 사용>>>

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class CollectionProgram {

	public static void main(String[] args) {
		// GList<Integer> list = new GList</* String */>();
		List<Integer> list = new ArrayList<>();
		// list의 값들은 별도의 식별자 index가 할당됨
		list.add(3);
		list.add(5);
		list.add(6);
		list.add(7);
		System.out.println(list.get(2));
		System.out.println(list.size());
		Iterator<Integer> it = list.iterator();

		while(it.hasNext()) {
			System.out.println(it.next());
		}
		Set<Integer> set = new HashSet<>();
		//Set은 식별자가 없음 값이 곧 식별자임
		//값 자체가 키가 되므로 식별자가 중복될 수 없음
		//즉 이미 있는 값이 중복되지 않는다.
		// Set으로 특정한 값을 꺼낼일을 없다. 전체를 나열해 뽑는건 가능
		// 사용하는 이유? >> "중복 제거용"
		set.add(3);
		set.add(5);
		set.add(6);
		set.add(7);
		set.add(7);
		set.add(7);
		set.add(7);

		System.out.println(set.add(7)); // 기존값 false 반환
		System.out.println(set.add(8)); // 새로운 값 true 반환
		System.out.println(set.size());
		
		Map<String, Object> map = new HashMap<>();
		map.put("id", 3);
		map.put("title", "hello");
		map.put("hit", 12);
		
		System.out.println(map.get("title"));
		
		
		/*
		 List >> 일반적으로 데이터를 배열처럼 관리하고 싶을때(가변길이) 사용
		 
		 Set >> 데이터 수집시 중복을 제거하는 형태의 데이터 수집이 필요할때
		 
		 Map >> 속성을 가지고 있는 개체를 a클래스로 정의하고 사용해야하는데 클래스를 정의하지 않고
		 속성과 값으로 구분된 데이터집합의 객체를 필요로할때 Map계열의 컬렉션을 만들어 사용하게
		*/
		
		/*
		 * 컬렉션을 사용할때 데이터를넣고 다른 한쪽은 데이터를 꺼낼수 있어야함 꺼내보는 작업을 반복자라고하는 iterator를 통해 꺼낸다
		 * iterator라는 패턴과 함께 공부
		 */
	}
}

