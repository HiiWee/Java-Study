< JDBC (Java Database Connectivity) 란? >
* 자바 프로그램이 데이터베이스와 연결되어 데이터를 주고받을 수 있게 해주는 프로그래밍 인터페이스

* Oracle, MsSQL, MySQL등 여러 DBMS를 연결하기위한 도구들을 어플리케이션을 만드는 사용자들이 직접 사용하지 않게하고 단일화 시킬 수 있는 도구

* JDBC만 바라보고 사용하면 되지만 JDBC가 사용하는 각 DBMS의 드라이버가 필요함 (각 DBMS마다 따로 존재하여 다운로드 해야함)

* JDBC 사용절차(순서)
  1. 드라이버 로드하기
  2. 연결 생성하기
  3. 문장(쿼리) 실행하기
  4. 결과집합 사용하기
* 오라클 JDBC 드라이버
	18c 버젼 : ojdbc8.jar (build path > configure build path > libraries > add external jars > 추가


< JDBC 기본 코드의 이해 >

* 사용절차를 코드로
  1. Class.forName("oracle.jdbc.driver.OracleDriver");
	>> new 연산자 대신 특별한 유틸리티로 객체화 (OraclDriver라는 클래스, 객체화 시키는 것이 load임)
  2. Connection con = DriverManager.getConnection(...);
	>> 드라이버 매니저를 이용해 연결 객체를 얻음(각 화살표)
  3. Statement st = con.createStatement();
	>> 실행도구를 생성
  4. ResultSet rs = st.executeQuery(sql);
	>> 서버측에서 쿼리를 실행한 결과집합이 생성되고 그릇역할(ResultSet)과 커서를 움직일 수 있는 도구(rs)를 준비
	>> 쿼리를 st.으로 실행하고 결과를 다시 rs에 fetch해오는 도구 생성

>> 객체 4개가 순차적으로 만들어짐 (어떤것하나 new 연산자를 사용하지 않음)
	> 이유 : 드라이버 매니저(DriverManaget.getConnection())를 로드가 안되면 커낵션 실행불가 > 또 연결(connection)이 되어야 실행도구(Statement) 생성가능 > 그래야 실행(st.execute)을해 결과를 얻을수있음(ResultSet)
		   즉 순차적으로 흐름을 가져감


* 코드 실행 시 결과
 1. > 메모리상 드라이버가 올라감

 2. > 연결이라는것이 이루어짐, 확립이 되면 객체가 반환됨

 3. > 연결된 서버로 실행도구 생성함

 4. > statement객체를 만들어 이후에 사용자로 부터 요구받은 쿼리를 실행함(st.executeQuery(sql))

 5. > 서버쪽에서 쿼리를 실행하고 결과집합(레코드집합)이 생성되나 사용자에게 결과집합을 다 돌려주지 않음
	그럼 어떻게 받느냐? 레코드 단위(Column단위)로 하나씩 받는다. 따라서 하나씩 돌려받는 위치를 가리키는 커서(레코드를 가리키는 포인터)가 필요함
    > 서버쪽에서 실행결과가 만들어지고 커서가 준비되면 이것을 사용할 수 있게하는 "클라이언트 도구"가 ResultSet 으로 준비된다.
    > ResultSet 객체가 만들어진다는것 == 결과집합을 받은게 아닌 결과집합을 이용할 수 있는 상태가 됨, 즉 클라이언트에 전달된 레코드를 담는 빈그릇이 ResultSet임
    > 결과집합 하나를 옮겨올 수 있도록 하는 빈그릇 하나가 만들어짐(ResultSet) (서버쪽에서 레코드 하나씩 넘겨주므로)
    > 최초 커서는 BOF를 가리킴(Before of File), 마지막은 EoF(End of File)

 6. rs.next();	> fetch 하는 것 호출해야만 BoF를 가리키던 커서가 첫번째 레코드로 이동해 클라이언트에게 레코드 하나를 전달할 수 있음(ResultSet빈그릇에 레코드 하나 채워짐)

 7. String title = rs.getString("title");	 > title column에 해당되는것을 문자열로 주세요. (ResultSet그릇에 저장된 레코드의 내용을 반환)
  > 5를 또 호출하면 다음 레코드를 가리킴 (더 이상 가져올 수 없는 상태 EoF까지 데이터를 반환하면 결과집합에 있는 내용을 모두 확인할 수 있음)

 8. rs.close();
 9. st.close();
 10. con.close(); >> 시스템의 자원을 사용하고 있기때문에 자원을 해제해 주기 위해서 역순으로 close()해준다. (집안으로 들어갔다가 다시 나오는 순서)
			   >> 일반적으로 닫지 않아도 저절로 반납되지만 자원을 사용하고 빨리 돌려주는게 성능에 더 좋음



< SQL을 잘해야하는 이유 : 자바와 SQL의 역할 분담 >
- 1억개의 데이터가 존재할때 우리가 필요한 데이터는 2개이면. sql에서 데이터를 필터링하고 자바에서 필터링된 데이터를 출력하기만 해야함.
  반대로 자바로 1억개의 데이터를 받아와서 자바에서 필터링을 하면 성능에서의 차이가 심해짐 따라서 아래의 규칙을 따라야함

* 공장(Oracle)이 필터링하고 JDBC는 그냥 전체데이터를 보여줘야함
* 데이터 필터링, 정렬, 그룹화 등의 모든 데이터 연산은 데이터베이스에서 처리한다.

** 자바 : UI 레이아웃 만
** SQL : 데이터 가공 처리(필터링, 정렬, 그룹화 등 모든 데이터 연산)



< 데이터 입력(insert, update)와 PreparedStatement >

* 결과집합이 있는 select를 생성할때는 executeQuery();
* insert, update, delete는 executeUpdate();

[데이터 업데이트를 위한 실행도구 준비]
* PreparedStatement st = con.prepareStatement(sql);
	> 미리 sql문을 준비해서 실행할때 넘기지 않고(st.execute(sql)) 미리 값을 채워넣고 나중에 실행만 할 수 있게끔 함.
	> Statement의 기능을 다 가지고 있고 
	> 더불어서 sql 데이터 삽입 문에서 물음표(?, ?, ?, ?) 처리 된 값을 채울 능력이 준비됨
	> prePareStatement(sql)자체가 인자로 쿼리문을 가지고 있다. 그리고 쿼리문을 세팅할 수 있는 능력이 있음
[세팅]
* st.set[타입](parameterIndex, title);
	> 인덱스는 1부터 시작됨
[실행단계]
* PreparedStatement를 사용하면 실행시 sql을 또 전달하지 않는다.


<CRUD를 담당하는 서비스 클래스 만들기>
* Crud Retriev Update Delete

* 동명의 클래스가 있을 수 있으므로 패키지명과(도메인) 같이 이용해서 만든다.
	>com.hoseok.app.service/NoticeService.java

* 서비스 클래스와 개체 클래스를 나눠서 작성 해야함



< 실행 오류 모음 >
Exception in thread "main" java.sql.SQLException: 마지막 행 다음의 결과 집합 >> EOF에 위치해있다